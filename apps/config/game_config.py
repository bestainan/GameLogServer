#-*- coding: utf-8 -*-try:    import jsonexcept ImportError:    import simplejson as jsonfrom apps.utils import game_definefrom apps import utilsall_config_name_list = [    'battle_effect_config',  # 战斗效果    'battle_position_config',  # 战斗位置    'game_config',  # 游戏配置    'zones_config',  # 界面选择区域    'item_config',  # 物品表    'monster_config',  # 怪表    'monster_level_config',  # 怪等级表    'monster_skill_config',  # 怪技能表    'skill_level_config',  # 技能等级    'monster_type_config',  # 怪类型表    'player_level_config',  # 玩家等级表    'stages_config',  # 关卡表    'drop_items_config',  # 物品掉落    'monster_reset_individual_config',  # 个体值重置（洗练）    'monster_upgrade_config',  # 怪升级表    'monster_reset_individual_config',  # 个体值表    'monster_break_config',  # 怪突破表    'monster_fragment_config',  # 怪碎片表    'draw_content_config',  # 抽奖配置    'vip_config',  # vip配置    'stamina_purchase_config',  # 体力购买设置    'gold_purchase_config',    #'task_config',       # 任务表    'recharge_config',  # 充值    #'mail_config',             # 邮件    'equip_config',  # 装备表    'equip_fragment_config',  # 装备碎片表    'event_fishing_config',  # 钓鱼    'catch_monster_config',  # 抓宠    'event_fishing_reward_config',  # 钓鱼奖励    'reward_team_power_config',  # 每日奖励 队伍战斗力    'reward_monster_level_config',  # 宠物奖励 宠物等级    'reward_monster_quality_config',  # 宠物奖励 宠物品质    'reward_monster_star_config',  # 宠物奖励 宠物星级    'reward_monster_kind_config',  # 宠物奖励 宠物种类    'reward_level_config',  # 玩家等级奖励    'reward_login_series_config',  # 累计登录奖励    'reward_vip_daily_config',  # 每日VIP奖励    'event_check_in_reward_config',  # 皮卡丘按摩领奖    'event_finger_guess_config',  # 武藏猜拳    'event_miao_bank_config',  # 喵银行    # newbie    'newbie_phase_config',  # 新手引导    'monster_band_config',  # 怪组合    'monster_band_effect_config',  # 怪组合效果表格    'guide_config',  # 引导表    'exchange_config',  # 兑换怪表    # 爵位    'the_title_config',  # 爵位表格    'rank_search_config',  # 排行榜挑战规则    'rank_config',  # 排行表    # 竞技场    "robot_data_config",  # 竞技场机器人表    "stone_shop_config",  # 钻石商城    "reward_recharge_first_config",  # 首冲礼包奖励    "reward_recharge_daily_config",  # 充值每日奖励    "reward_recharge_sum_config",  # 累计充值奖励    # 试炼部分表格    "trial_enemy_config",  # 试炼怪表    "trial_reward_config",  # 试炼奖励表    # 竞猜部分    "quiz_config",  # 题目表格    # 玩家邀请    "invitation_reward_config",  # 玩家邀请奖励表格    # 世界BOSS    "wb_boss_list_config",  # 世界BOSS列表    "wb_inspire_config",  # 世界BOSS鼓舞表    "wb_reload_config",  # 世界BOSS 重置表    "wb_reward_config",  # 世界BOSS 奖励表    "boss_info_config",  # boss难度表    "boss_shop_config",  # BOSS商店    # 百变怪商城    "ditto_shop_config",  # 百变怪商城    # 每日任务    "daily_task_config",  # 每日任务    "reward_daily_task_config",  # 每日任务奖励    "pvp_shop_config",  # PVP商城    "reward_seven_level_config",  # 开服7天等级奖励    "reward_seven_power_config",  # 开服7天战力奖励    "reward_times_normal_stage_config",    "reward_times_hard_stage_config",     "reward_times_arena_config",    "reward_times_finger_guess_config",    "reward_stone_consumption_config",  # 钻石消耗    "reward_one_recharge_config",       # 单笔充值    "time_limited_shift_shop_config",   # 友好商店    "time_limited_shop_config",         # 便利商店    "holiday_shop_config",              # 假日商店    "reward_share_weixin_config",       # 微信分享    "regist_recharge_config",           # 豪华签到充值    "reward_times_fishing_config",  #    "reward_times_gym_config",  #    "reward_times_treasure_config",  #    "reward_time_recharge_short_config",  #    "reward_time_recharge_long_config",  #    # "reward_time_limited_recharge_config",  # 开服7天战力奖励    #怪进化    'monster_evolution_config',  # 怪进化表    #签到    'regist_config',  # 30天签到    #夺宝    'treasure_list_config',  # 宝物列表    'synthesize_config',  # 开启规则    'treasure_rank_config',     # 宝物阶级表    # 道场    'gym_zone_config',  # 道场区域    'gym_stage_config',  # 道场关卡    'gym_reward_config',  # 道场奖励    'gym_shop_config',  # 道场商店    'gym_buff_config',  # 道场BUFF    # 抽卡    'pvp_lottery_config',  # 抽卡表     # 区域/关卡奖励    'reward_zone_config',   # 区域奖励（关卡过关获得的奖励）    'reward_zone_gold_crown_config', # 区域金皇冠奖励    'union_reward_config' , #联盟奖励    'union_battlefield_level_config',  #联盟副本与关卡    'union_battlefield_config', #联盟关卡详细    'union_shop_config',  #联盟商店    'reward_friend_number_config',  #好友数量奖励]# 根据属性列表，加载游戏配置信息for config_name in all_config_name_list:    try:        f = open('%s/%s.py' % ("/opt/GameServerConfig", config_name))        data = f.read()        f.close()        exec (config_name + '=json.loads(data)')    except:        print("配置表缺失: " + config_name)def build_client_configs():    client_config_name_list = [        'battle_effect_config',  # 战斗效果        'battle_position_config',  # 战斗位置        'game_config',  # 游戏配置        'zones_config',  # 界面选择区域        'item_config',  # 物品表        'monster_config',  # 怪表        'monster_level_config',  # 怪等级表        'monster_skill_config',  # 怪技能表        'skill_level_config',  # 技能等级        'monster_type_config',  # 怪类型表        'player_level_config',  # 玩家等级表        'stages_config',  # 关卡表        'drop_items_config',  # 物品掉落        'monster_reset_individual_config',  # 个体值重置（洗练）        'monster_upgrade_config',  # 怪升级表        'monster_reset_individual_config',  # 个体值表        'monster_break_config',  # 怪突破表        'monster_fragment_config',  # 怪碎片表        'draw_content_config',  # 抽奖表        'vip_config',  # vip配置表        'stamina_purchase_config',  # 体力购买设置        'gold_purchase_config',        # 'task_config',       # 任务表        'recharge_config',  # 充值        #'mail_config',             # 邮件        'equip_config',  # 装备表        'equip_fragment_config',  # 装备碎片表        'event_fishing_config',  # 钓鱼        'catch_monster_config',  # 抓宠        'event_fishing_reward_config',  # 钓鱼奖励        'reward_team_power_config',  # 每日奖励 队伍战斗力        'reward_monster_level_config',  # 宠物奖励 宠物等级        'reward_monster_quality_config',  # 宠物奖励 宠物品质        'reward_monster_star_config',  # 宠物奖励 宠物星级        'reward_monster_kind_config',  # 宠物奖励 宠物种类        'reward_level_config',  # 玩家等级奖励        'reward_login_series_config',  # 累计登录奖励        'reward_vip_daily_config',  # 每日VIP奖励        'event_check_in_reward_config',  # 皮卡丘按摩领奖        'event_finger_guess_config',  # 武藏猜拳        'event_miao_bank_config',  # 喵银行        # newbie        'newbie_phase_config',  # 新手引导        'monster_band_config',  # 怪组合        'monster_band_effect_config',  # 怪组合效果表格        'exchange_config',  # 兑换怪表        'guide_config',  # 引导表        # 爵位        'the_title_config',  # 爵位表格        'rank_search_config',  # 排行榜挑战规则        'rank_config',  # 排行表        # 竞技场        "robot_data_config",  # 竞技场机器人表        "stone_shop_config",  # 钻石商城        "reward_recharge_first_config",  # 首冲礼包奖励        "reward_recharge_daily_config",  # 充值每日奖励        "reward_recharge_sum_config",  # 累计充值奖励        # 试炼部分表格        "trial_enemy_config",  # 试炼怪表        "trial_reward_config",  # 试炼奖励表        # 竞猜部分        "quiz_config",  # 题目表格        # 玩家邀请        "invitation_reward_config",  # 玩家邀请奖励表格        # 世界BOSS        "wb_boss_list_config",  # 世界BOSS列表        "wb_inspire_config",  # 世界BOSS鼓舞表        "wb_reload_config",  # 世界BOSS 重置表        "wb_reward_config",  # 世界BOSS 奖励表        "boss_info_config",  # boss难度表        "boss_shop_config",  # BOSS商店        # 百变怪商城        "ditto_shop_config",  # 百变怪商城        "daily_task_config",  # 每日任务        "reward_daily_task_config",  # 每日任务奖励        "pvp_shop_config",  # PVP商城        #怪进化        'monster_evolution_config',  # 怪进化表        #签到        'regist_config',  # 30天签到        #夺宝        'treasure_list_config',  # 宝物列表        'synthesize_config',  # 开启规则        'treasure_rank_config',     # 宝物阶级表        # 道场        'gym_zone_config',  # 道场区域        'gym_stage_config',  # 道场关卡        'gym_reward_config',  # 道场奖励        'gym_shop_config',  # 道场商店        'gym_buff_config',  # 道场BUFF dict        # 抽卡        'pvp_lottery_config',  # 抽卡表        # 区域/关卡奖励        'reward_zone_config',   # 区域奖励（关卡过关获得的奖励）        'reward_zone_gold_crown_config', # 区域金皇冠奖励        # 运营活动        "reward_seven_level_config",  # 开服7天等级奖励        "reward_seven_power_config",  # 开服7天战力奖励        "reward_times_normal_stage_config",        "reward_times_hard_stage_config",         "reward_times_arena_config",        "reward_times_finger_guess_config",        "reward_stone_consumption_config",  # 钻石消耗        "reward_one_recharge_config",       # 单笔充值        "time_limited_shift_shop_config",   # 友好商店        "time_limited_shop_config",         # 便利商店        "holiday_shop_config",              # 假日商店        "reward_share_weixin_config",       # 微信分享        "regist_recharge_config",           # 豪华签到充值        "reward_times_fishing_config",  #        "reward_times_gym_config",  #        "reward_times_treasure_config",        "reward_time_recharge_short_config",  #        "reward_time_recharge_long_config",  #        'union_reward_config',  #联盟奖励        'union_battlefield_level_config',  #联盟副本与关卡        'union_battlefield_config', #联盟关卡详细        'union_shop_config', #联盟商店        'reward_friend_number_config',  #好友数量奖励    ]    items = dict()    for name in client_config_name_list:        items[name] = eval(name)    return itemsclient_configs = build_client_configs()def get_reward_zone_gold_crown_config(zone_id):    """        ["id","int"],                        #ID        ["stageId","int"],                   #关卡ID        ["gold","int"],                      #奖励金币        ["stone","int"],                     #奖励钻石        ["pokeBall","int"],                  #奖励宝贝球数量        ["experience","int"],                #奖励玩家经验值        #奖励物品        ["equipmentId","int"],                #奖励装备ID        ["monsterId","int"],                  #奖励宠物ID        ["monsterStar","int"],                #奖励宠物星级        ["item1","int"],                      #奖励物品id        ["num1","int"],                       #奖励物品数量        ["item2","int"],                      #奖励物品id        ["num2","int"],                       #奖励物品数量        ["item3","int"],                      #奖励物品id        ["num3","int"],                       #奖励物品数量    """    reward_zone_gold_crown_config = client_configs['reward_zone_gold_crown_config']    select_reward_zone_gold_crown_config = lambda x:x['zoneId'] == zone_id    result = filter(select_reward_zone_gold_crown_config, reward_zone_gold_crown_config)    if result:        return result[0]    return Nonedef get_reward_zone_config(zone_id, type_id):    """        获取区域奖励        ["id","int"],                        #ID        ["zoneId","int"],                    #地区ID        ["type","int"],                      #分类，0为普通难度，1为困难难度        ["gold","int"],                      #奖励金币        ["stone","int"],                     #奖励钻石        ["pokeBall","int"],                  #奖励宝贝球数量        ["experience","int"],                #奖励玩家经验值        #奖励物品        ["equipmentId","int"],                #奖励装备ID        ["monsterId","int"],                  #奖励宠物ID        ["monsterStar","int"],                #奖励宠物星级        ["item1","int"],                      #奖励物品1id        ["num1","int"],                       #奖励物品1数量        ["item2","int"],                      #奖励物品2id        ["num2","int"],                       #奖励物品2数量        ["item3","int"],                      #奖励物品3id        ["num3","int"],                       #奖励物品3数量    """    reward_zone_config = client_configs['reward_zone_config']    select_reward_zone_config = lambda x:x['zoneId'] == zone_id and x['type'] == type_id    result = filter(select_reward_zone_config, reward_zone_config)    if result:        return result[0]    return Nonedef get_treasure_rank_config(treasure_rank):    """        获取宝物阶级表        ["id", "int"],                # 宝物品阶（从0开始）        ["num", "int"],               # 需要材料数量        ["gold", "int"],              # 花费金币        ["treasureNum", "int"],       # 消耗自身数量    """    _treasure_rank_config_dict = client_configs['treasure_rank_config']    str_key = str(treasure_rank)    if str_key in _treasure_rank_config_dict:        return _treasure_rank_config_dict[str_key]    else:        return Nonedef get_gym_buff_config(buff_id):    _gym_buff_config = client_configs['gym_buff_config']    select_gym_buff_config = lambda x: x['id'] == buff_id    result = filter(select_gym_buff_config, _gym_buff_config)    if result:        return result[0]    return Nonedef get_all_gym_buff_config():    """        dict        ["id", "int"],                   #挑战道馆加成编号        ["star", "int"],                 #挑战道馆加成所消耗的星数，同一星数中roll一个显示        ["rate", "int"],                 #挑战道馆同一消耗星数下，此加成出现几率        ["attackBuff", "int"],           #获得攻击加成百分比        ["defenseBuff", "int"],          #获得防御加成百分比        ["specAttackBuff", "int"],       #获得特攻加成百分比        ["specDefenseBuff", "int"],      #获得特防加成百分比        ["staminaBuff", "int"],          #获得血量加成百分比    """    return client_configs['gym_buff_config']def get_pvp_lottery_config(config_id):    """        玩家抽卡        ["id", "int"],                   # 随机结果ID        ["packgeId", "int"],             # 分组ID，    分组1：夺宝翻牌        ["item", "int"],                 # 物品ID        ["num", "int"],                  # 物品获得数量        ["treasureFragmentId", "int"],   # 碎片ID        ["gold", "int"],                 # 获得金币数量        ["stone", "int"],                # 获得钻石数量        ["chance", "int"],               # 出现几率    """    _pvp_lottery_config = client_configs['pvp_lottery_config']    select_pvp_lottery_config = lambda x: x['id'] == config_id    result = filter(select_pvp_lottery_config, _pvp_lottery_config)    if result:        return result[0]    return Nonedef get_pvp_lottery_config_interval():    """        获取抽卡权重    """    _pvp_lottery_config = client_configs['pvp_lottery_config']    return [_config['chance'] for _config in _pvp_lottery_config]def get_all_gym_reward_config():    """        获取道场奖励            ["id", "int"],                   # 道馆奖励ID            ["price", "int"],                # 道馆奖励购买所需道馆币数量            ["star", "int"],                 # 道馆奖励领取所需星数            ["item", "int"],                 # 奖励物品ID            ["itemNum", "int"],              # 奖励物品的数量            ["stone", "int"],                # 奖励钻石数量            ["gold", "int"],                 # 奖励金币数量            ["freeDraw", "int"],             # 奖励宝贝球数量            ["equip", "int"],                # 奖励装备ID    """    _gym_reward_config = client_configs['gym_reward_config']    return _gym_reward_config.values()def get_gym_reward_config(config_id):    """        获取道场奖励            ["id", "int"],                   # 道馆奖励ID            ["price", "int"],                # 道馆奖励购买所需道馆币数量            ["star", "int"],                 # 道馆奖励领取所需星数            ["item", "int"],                 # 奖励物品ID            ["itemNum", "int"],              # 奖励物品的数量            ["stone", "int"],                # 奖励钻石数量            ["gold", "int"],                 # 奖励金币数量            ["freeDraw", "int"],             # 奖励宝贝球数量            ["equip", "int"],                # 奖励装备ID    """    _gym_reward_config = client_configs['gym_reward_config']    return _gym_reward_config.get(str(config_id), None)def get_gym_shop_with_package(package_id):    """        用包ID 获取对应的物品列表        dict()    """    _gym_shop_config = client_configs['gym_shop_config']    select_gym_shop_config = lambda x: x['packgeId'] == package_id    result = filter(select_gym_shop_config, _gym_shop_config)    return resultdef get_gym_shop_config(item_id):    """        获取道场商店配置        ["id", "int"],                   # 道馆商店商品ID        ["packgeId", "int"],             # 道馆商店商品分类包的ID，对应不同的商品位置        ["item", "int"],                 # 奖励物品ID        ["itemNum", "int"],              # 奖励物品的数量        ["price", "int"],                # 道馆商品购买所需道馆币数量        ["chance", "int"],               # 道馆商品同一位置上物品出现几率        ["star", "int"],                 # 道馆商品购买前置条件——所需星数    """    _gym_shop_config = client_configs['gym_shop_config']    select_gym_shop_config = lambda x: x['id'] == item_id    result = filter(select_gym_shop_config, _gym_shop_config)    if result:        return result[0]    return Nonedef get_gym_stage_config(gym_stage_id):    """        获取道场表            ['id','int'],               #道馆ID            ['stageInfo','string'],     #道馆名称对应string            ['zone','int'],             #所属区域的ID，每三个道馆属于一个地区            ['scene','string'],         #场景，对应一张关卡地图            ['head','int'],             #zone地图上显示的宠物头像的ID            ['win','int'],              #胜利条件的类型     1-在指定回合数内消灭所有敌人 2-战斗结束时我方死亡人数不能超过指定数量            ['winNum','int'],           #不同胜利条件对应的数值需求，类型1对应的是回合数，超过此回合数战斗时，直接判定失败；类型2对应的是死亡宠物数量，死亡宠物数量超过此数值时，直接判定失败            ['gymCoin','int'],         #该关卡容易难度获胜时获得的道馆币数量            ['gold','int'],            #该关卡容易难度获胜时获得的金币数量            ['power1','int'],            #该关卡容易难度显示的推荐战力            ['power2','int'],            #该关卡普通难度显示的推荐战力            ['power3','int'],            #该关卡困难难度显示的推荐战力            ['plus1','int'],            #该关卡普通难度时，敌人单项六维相对容易难度增加的数值            ['plus2','int'],            #该关卡困难难度时，敌人单项六维相对容易难度增加的数值            #BOSS标记与BOSS数据索引            ['bossPosition','int'],      #boss出现的位置，显示哪个是大卡牌            ['bossType','int'],          #boss的属性修正类型和缩放比例系数索引ID            #出现敌人            #参数说明            #怪物ID，等级，星级，个体值，血量值、物攻、物防、特攻、特防、速度、技能1等级、技能2等级            ['enemy1','string'],       # 该关卡容易难度的敌人1信息            ['enemy2','string'],       # 该关卡容易难度的敌人2信息            ['enemy3','string'],       # 该关卡容易难度的敌人3信息            ['enemy4','string'],       # 该关卡容易难度的敌人4信息            ['enemy5','string'],       # 该关卡容易难度的敌人5信息    """    _gym_stage_config = client_configs['gym_stage_config']    select_gym_stage_config = lambda x: x['id'] == gym_stage_id    result = filter(select_gym_stage_config, _gym_stage_config.values())    if result:        return result[0]    return Nonedef get_gym_zone_config(gym_zone_id):    """        用区域id获取对应关卡            ["id", "int"],                   # ID编号            ["zone", "int"],                 # 对应的zone的ID            ["starMini", "int"],             # 对应zone的对应奖励领取所需最小星数            ["starMax", "int"],              # 对应zone的对应奖励领取所需最高星数            ["item1", "int"],                # 奖励物品1的ID            ["itemNum1", "int"],             # 奖励物品1的数量            ["item2", "int"],                # 奖励物品2的ID            ["itemNum2", "int"],             # 奖励物品2的数量            ["gymCoin", "int"],              # 奖励道馆币的数量            ["gold", "int"],                 # 奖励金币的数量    """    _gym_zone_config = client_configs['gym_zone_config']    select_gym_zone_config = lambda x: x['zone'] == gym_zone_id    result = filter(select_gym_zone_config, _gym_zone_config.values())    if result:        return result    return Nonedef get_all_synthesize_config():    """        获取全部的夺宝开启规则表        ["id", "int"],                   # 编号ID        ["itemId", "int"],               # 合成目标物品ID        #开启条件        ["playerLevel", "int"],          # 开启等级        ["openItemId", "int"],           # 开启物品ID        ["item1Id", "int"],                  # 物品1ID        ["item2Id", "int"],                  # 物品2ID        ["item3Id", "int"],                  # 物品3ID        ["item4Id", "int"],                  # 物品4ID        ["item5Id", "int"],                  # 物品5ID    """    _synthesize_config = client_configs['synthesize_config']    return _synthesize_configdef get_synthesize_config(treasure_id):    """        获取全部的夺宝开启规则表        ["id", "int"],                   # 编号ID        ["itemId", "int"],               # 合成目标物品ID        #开启条件        ["playerLevel", "int"],          # 开启等级        ["openItemId", "int"],           # 开启物品ID        ["item1Id", "int"],                  # 物品1ID        ["item2Id", "int"],                  # 物品2ID        ["item3Id", "int"],                  # 物品3ID        ["item4Id", "int"],                  # 物品4ID        ["item5Id", "int"],                  # 物品5ID    """    _synthesize_config = client_configs['synthesize_config']    select_synthesize_config = lambda x: x['itemId'] == treasure_id    result = filter(select_synthesize_config, _synthesize_config)    if result:        return result[0]    return None## def get_synthesize_config_with_treasure_id(treasure_id):#     """#         获取全部的夺宝开启规则表#         ["id", "int"],                   # 编号ID##         ["itemId", "int"],               # 合成目标物品ID##         #开启条件#         ["playerLevel", "int"],          # 开启等级#         ["openItemId", "int"],           # 开启物品ID##         ["item1Id", "int"],                  # 物品1ID#         ["item2Id", "int"],                  # 物品2ID#         ["item3Id", "int"],                  # 物品3ID#         ["item4Id", "int"],                  # 物品4ID#         ["item5Id", "int"],                  # 物品5ID#     """#     _synthesize_config = client_configs['synthesize_config']#     select_synthesize_config = lambda x: x['itemId'] == treasure_id#     result = filter(select_synthesize_config, _synthesize_config)#     if result:#         return result[0]#     return Nonedef get_treasureList_config(treasure_id):    """        用id获取宝物表格          ["id", "int"],           # 宝物ID            ["name", "string"],      # 宝物名称            ["color", "int"],          # 颜色分类            ["maxLevel", "int"],       # 宝物等级上限            #效果1-基础效果            ["effect1Type", "int"],         # 效果1分类            ["effect1BaseNum", "int"],      # 效果1起始数值            ["effect1AddNum", "float"],       # 效果1增加数值            #效果2-基础效果            ["effect2Type", "int"],         # 效果2分类            ["effect2BaseNum", "int"],      # 效果2起始数值            ["effect2AddNum", "float"],       # 效果2增加数值            #掠夺成功几率            ["plunderPlayer", "int"],         # 抢夺玩家成功率            ["plunderRobot", "int"],          # 抢夺机器人成功率            ["type", "int"],          # 宝石类型    """    _treasureList_config = client_configs['treasure_list_config']    select_treasure_list_config = lambda x: x['id'] == treasure_id    result = filter(select_treasure_list_config, _treasureList_config)    if result:        return result[0]    return Nonedef get_drop_items_config(drop_id):    """    获取掉落表    """    _drop_items_config = client_configs['drop_items_config']    select_drop_items_config = lambda x: x['id'] == drop_id    result = filter(select_drop_items_config, _drop_items_config)    if result:        return result[0]    return Nonedef get_monster_break_config_used(old_level):    _monster_break_config = client_configs['monster_break_config']    select_monster_break_config = lambda x: x['oldLevel'] < old_level    result = filter(select_monster_break_config, _monster_break_config)    if result:        return result    return Nonedef get_monster_break_config(old_level):    """    获取掉落表        ["id","int"],              #突破id        ["name","string"],         #材料分组名称        ["info","string"],         #策划注释        ["materialId1","int"],       #材料ID1        ["num1","int"],              #数量1        ["materialId2","int"],       #材料ID2        ["num2","int"],              #数量2        ["materialId3","int"],       #材料ID3        ["num3","int"],              #数量3        ["materialId4","int"],       #材料ID4        ["num4","int"],              #数量4        ["materialId5","int"],         #材料ID5        ["num5","int"],                #数量5        ["materialId6","int"],         #材料ID6        ["num6","int"],                #数量6        ["gold","int"],           #消耗金币        ["oldLevel","int"],        #突破前等级上限        ["newLevel","int"],        #突破后等级上限        ["effort","int"]             #努力值提升    """    _monster_break_config = client_configs['monster_break_config']    select_monster_break_config = lambda x: x['oldLevel'] == old_level    result = filter(select_monster_break_config, _monster_break_config)    if result:        return result[0]    return Nonedef get_monster_reset_individual_config(quality):    """        获取洗练表格        {"stone": 5, "stoneMin": 1, "gold": 2000, "min": 0, "max": 50,        "stoneMax": 6, "goldMin": -2, "id": 0, "goldMax": 4}            ['id', 'int'],      # 颜色值            ['min', 'int'],           # 个体值随机数下限            ['max', 'int'],           # 个体值随机数上限            ['gold', 'int'],          # 普通洗练每次消耗的金币数量            #金币随机个体值增加范围            ['goldMin', 'int'],           # 个体值增加点数下限            ['goldMax', 'int'],           # 个体值增加点数上限            #钻石随机个体值增加范围            ['stoneMin', 'int'],           # 个体值增加点数下限            ['stoneMax', 'int'],           # 个体值增加点数上限            #钻石增加几率            ['stone', 'int'],                 # 钻石洗练需求    """    _monster_reset_individual_config = client_configs['monster_reset_individual_config']    for item in _monster_reset_individual_config:        if item['id'] == quality:            return item    return Nonedef get_monster_fragment_config(fragment_id):    """    获取碎片表格        ['fragmentId','int'],              #碎片编号        ['num','int'],                     #合成宠物所需的最小碎片数量        ['monsterID','int'],               #宠物ID        ['monsterStar','int'],             #合成宠物星数        #使用碎片合成整宠时的掉落颜色        ['dropMonsterColor1','float'],              # 白色几率        ['dropMonsterColor2','float'],              # 绿色几率        ['dropMonsterColor3','float'],              # 蓝色几率        ['dropMonsterColor4','float']               # 紫色几率    """    _monster_fragment_config = client_configs['monster_fragment_config']    for item in _monster_fragment_config:        if item['fragmentId'] == fragment_id:            return item    return Nonedef get_player_level_config(level):    """    获取玩家等级表    ["level","int"],    ["exp","int"],    ["maxPower","int"],                  #体力上限    ["recoverPower","int"],              #回复体力    ["monsterSpace","int"],              #宠物背包空间    ["leadship","int"],                  #领导力限制    ["friendSpace","int"]                #好友上限    """    _player_level_config = client_configs['player_level_config']    for item in _player_level_config:        if item['level'] == level:            return item    return Nonedef get_game_config_val_int(key):    """    获取游戏数据表值        BattleSpeedLineTime	111        BattleEnemyScale	1        BattleModuleLevelScale	0.000        PlayerCreateMonster	1,4,7        PlayerStaminaRecover	10        PlayerMaxStamina	120        UpgradeStarCard	3,3,3,6        UpgradeStarGold	10000,20000,500000,1000000        TeamOpenLevel	1,3,5,8,12        LevelOpenTeamNum	1,12,30        VIPLevelOpenTeamNum	5,10        MaxBattleSpeed	5        PlayerMonsterSkillOpen	1,5,1000,1000,1000        Red	[ff0000]        Green	[00ff00]        MonsterMaxLevel	100        MaxStorageNum	200        BattleResultRank	5,12,30    """    _game_config = client_configs['game_config']    for item in _game_config:        if item['key'] == key:            return int(item['val'])    return 0def get_game_config_val_str_utf8(key):    """    获取游戏数据表里面的值    """    _game_config = client_configs['game_config']    for item in _game_config:        if item['key'] == key:            return item['val'].encode('utf8')    return ""def get_game_config_val_str(key):    """    获取游戏数据表里面的值    """    _game_config = client_configs['game_config']    for item in _game_config:        if item['key'] == key:            return item['val'].encode('utf8')    return ""def get_game_config_val_float(key):    """    获取游戏数据表值    """    _game_config = client_configs['game_config']    for item in _game_config:        if item['key'] == key:            return float(item['val'])    return 0def get_game_config_val_int_array(key, split=','):    """    获取游戏数据表值    """    _game_config = client_configs['game_config']    for item in _game_config:        if item['key'] == key:            str_v = item['val']            lst_str_v = str_v.split(split)            lst_int_v = []            for i in range(len(lst_str_v)):                lst_int_v.append(int(lst_str_v[i]))            return lst_int_v    return Nonedef get_monster_config(monster_tid):    """        获取怪表格            #怪物基础属性    ["id","int"],            #怪编号    ["CH_name","skip"],      #中文索引名字，策划注释    ["name","string"],       #名字    ["type","int"],          #属性    ['leader','int'],        #领导力    ["hp","int"],            #生命    ["attack","int"],        #物理攻击    ["defence","int"],       #物理防御    ["spcAttack","int"],     #特殊攻击    ["spcDefence","int"],    #特殊防御    ["speed","int"],         #速度    ["skill1","int"],        #技能1    ["skill2","int"],        #技能2    ['skillPower','int'],    #怒气值上限    ['sexRate','int'],            #性别比例    ['evoLink','int'],              #进化链ID，属于哪只宠的进化链    ['evoClass','int'],             #进化阶，1阶代表初级，2阶代表终极，3阶代表高级    ['evoLevel','int'],             #进化要求的条件等级    ['evoId','int'],                #进化宠物id    ['EvoStoneTotal','int'],        #进化度全满需要太阳石数量    ['EvolutionStone','int'],       #吃到多少个太阳石能进化一阶    ['EvoStoneDown','int'],         #老数据的话，升星抵太阳石数量    #怪物资源    ['getInfo','string'],       #宠物获得途径    ["icon","string"],          #图标    ['Sound','string'],         #宠物声音    ["fbx","string"],           #FBX资源    ["fbxBattle","string"],     #FBX资源_战斗，因为粒子不能缩放    ["infoScale","float"] ,     #在UI中的缩放系数    ["YCamera","int"],          #在UI中的Y轴偏移    #战斗中    ["scale","float"],          #在战斗中缩放系数    ['YEffect','float'],        #Y轴偏移量，战斗头顶特效位置    ['info','string'],          #宠物介绍    ['color','int'],            #卡边颜色   0-白色 1-绿色  2-蓝色 3-紫色 4粉色 5-金色    ['defeatEvoClass','int'],            #默认进化阶    ['maxEvoClass','int'],               #宠物的最大进化阶数    #图鉴开关    ['open','int'],               #宠物的是否在图鉴中显示   0不显示，1显示    """    _monster_config = client_configs['monster_config']    for item in _monster_config:        if item['id'] == monster_tid:            return item    return Nonedef get_fragment_shop_config(id):    """        玩家碎片商店    """    _fragment_shop_config = client_configs['fragment_shop_config']    for item in _fragment_shop_config:        if item['id'] == id:            return item    return Nonedef get_all_monster_config():    """        获取怪表长度    """    return client_configs['monster_config']def get_monster_evolution_monster_config(monster_tid):    """        获取怪进化表    """    select_evolution_lst = lambda config: config['evoId'] == monster_tid    result = filter(select_evolution_lst, client_configs['monster_config'])    if result:        return result[0]    return Nonedef get_monster_evolution_config(monster_evo_level, color):    """        获取怪进化表格    """    select_monster_evolution_lst = lambda config: (config['evoLevel'] == monster_evo_level and config['color'] == color)    result = filter(select_monster_evolution_lst, client_configs['monster_evolution_config'])    if result:        return result[0]    return Nonedef get_monster_evolution_lst(monster_tid):    """        获取进化链    """    monster_config = get_monster_config(monster_tid)    select_evolution_lst = lambda config: config['evoLink'] == monster_config['evoLink']    result = filter(select_evolution_lst, client_configs['monster_config'])    # 从小到大排序    sorted(result, cmp=lambda x, y: cmp(x['evoClass'], y['evoClass']))    return resultdef get_monster_evolution_start(monster_tid):    """        获取终极进化    """    evo_line = get_monster_evolution_lst(monster_tid)    start_evo = None    for item in evo_line:        if start_evo == None or start_evo['evoClass'] > item['evoClass']:            start_evo = item    return start_evodef get_monster_evolution_final(monster_tid):    """        获取终极进化    """    evo_line = get_monster_evolution_lst(monster_tid)    final_evo = None    for item in evo_line:        if final_evo == None or final_evo['evoClass'] < item['evoClass']:            final_evo = item    return final_evodef get_monster_config_with_id_name():    """    获取完整物品表格 的 ID name 映射    """    _monster_config = client_configs['monster_config']    _re_item = dict()    for item in _monster_config:        _re_item[item['id']] = item['name']    return _re_itemdef get_monster_level_config(level):    """    怪等级表格        ['level', 'int'],                       # 等级        ['exp', 'int'],                         # 所需经验        ['monsterSkill1Level', 'int'],      # 野外怪物技能1等级        ['monsterSkill2Level', 'int'],      # 野外怪物技能2等级        ['monsterSkill3Level', 'int'],      # 野外怪物技能3等级        ['monsterSkill4Level', 'int'],      # 野外怪物技能4等级        ['monsterSkill5Level', 'int'],      # 野外怪物技能5等级    """    _monster_level_config = client_configs['monster_level_config']    for item in _monster_level_config:        if item['level'] == level:            return item    return Nonedef get_item_config(tid):    """    物品表格        ['id','int'],               #物品ID        ['name','string'],          #名字        ['icon','string'],          #图标        ['descrip','string'],       #说明        ['stack','int'],            #堆叠上限        ['itemType','int'],         #物品类型：0-普通材料，1-装备        ['itemPrice','int'],         #物品售价        ['itemIconBG','string'],     #物品图标背景图片名称        ['info','string'],           #掉落说明信息        #兑换精华        ['smallMedal','int'],           #兑换蓝色精华数量        ['goldMedal','int'],            #兑换金色精华数量    """    _item_config = client_configs['item_config']    for item in _item_config:        if item['id'] == tid:            return item    return Nonedef get_item_config_with_id_name():    """    获取完整物品表格 的 ID name 映射    """    _item_config = client_configs['item_config']    _re_item = dict()    _re_item_type = dict()    for item in _item_config:        _re_item[item['id']] = item['name']        _re_item_type[item['id']] = item['itemType']    return _re_item, _re_item_typedef get_skill_level_config(level):    """    获取技能等级表        ["level", "int"],        ["effect", "int"],        ["exp1", "int"],        ["money1", "int"],        ["exp2", "int"],        ["money2", "int"],        ["exp3", "int"],        ["money3", "int"],        ["exp4", "int"],        ["money4", "int"],    """    _skill_level_config = client_configs['skill_level_config']    for item in _skill_level_config:        if item['level'] == level:            return item    return Nonedef get_all_zone_config():    """        获取全部关卡区域表    """    return client_configs['zones_config']def get_zones_config(zone_id):    """    获取区域表格        ['id', 'int'],  # 区域ID        ['path', 'string'],  # 资源路径        ['name', 'string'],  # 名字        ['level1', 'int'],   # 普通副本开启等级        ['level2', 'int'],   # 英雄副本开启等级        ['level3', 'int']    # 精英副本开启等级    """    _zones_config = client_configs['zones_config']    for item in _zones_config:        if item['id'] == zone_id:            return item    return Nonedef get_stages_config_by_zone_diff(zone_id, diff):    """        用区域ID 获取关卡列表    """    _stages_config = client_configs['stages_config']    select_stages_config = lambda config: config['zone'] == zone_id and config['type'] == diff    result = filter(select_stages_config, _stages_config.values())    if result:        return result    return Nonedef get_stages_config(stage_id):    """    获取关卡表        ['id','int'],               #关卡ID        ['stageInfo','int'],        #关卡名称ID        ['zone','int'],             #所属区域        ['scene','string'],         #场景        ['type','int'],             #类型     1普通、2精英、3英雄、4经验、5金币、6抓宠、7世界BOSS、8修行        ['cost','int'],              #体力花费        ['num','int'],               #每天次数        ['exp','int'],               #玩家经验        ['gold','int'],              #副本金钱奖励        ['monsterExp','int'],        #副本宠物经验        #BOSS标记与BOSS数据索引        ['bossPosition','int'],      #boss出现的位置，显示哪个是大卡牌        ['bossType','int'],          #boss的属性修正类型和缩放比例系数索引ID        #出现敌人        #参数说明        #怪物ID，等级，星级，个体值，血量值、物攻、物防、特攻、特防、速度、技能1等级、技能2等级        ['enemy1','string'],       # 敌人1信息        ['enemy2','string'],       # 敌人2信息        ['enemy3','string'],       # 敌人3信息        ['enemy4','string'],       # 敌人4信息        ['enemy5','string'],       # 敌人5信息        ['enemy6','string'],       # 敌人6信息        ['enemy7','string'],       # 敌人7信息        ['enemy8','string'],       # 敌人8信息        ['enemy9','string'],       # 敌人9信息    #掉落宠物或宠物碎片        ['dropMonsterId','int'],                     #宠物ID        ['dropMonsterRate','float'],                 #宠物掉率几率        ['dropMonsterStar','int'],                   #宠物掉落星级    1、2、3、4、5为指定星数        ['dropMonsterColor','int'],                  #宠物掉落颜色    0白、1绿、2蓝、3紫、4粉、5金为指定颜色    #掉落宠物碎片        ['dropMonsterFragment','int'],                #掉落宠物碎片Id        ['dropMonsterFragmentRate','float'],          #掉落宠物碎片几率    #普通掉落道具        ['dropItemPacket1','int'],                    #掉落包ID1        ['dropItemPacketRate1','float'],              #掉落包1几率        ['dropItemPacket2','int'],                    #掉落包ID2        ['dropItemPacketRate2','float'],              #掉落包2几率    """    _stages_config = client_configs['stages_config']    str_stage_id = str(stage_id)    if str_stage_id in _stages_config:        return _stages_config[str_stage_id]    return Nonedef get_all_stage_config():    """        获取全部的关卡数据    """    _stages_config = client_configs['stages_config']    return _stages_config.values()def get_stage_config_with_type_lst(stage_type):    """        获取制定类型的关卡数据    """    return filter(lambda x: x['type'] == stage_type, client_configs['stages_config'].values())def get_event_check_in_reward_config(config_id):    """    皮卡丘按摩的奖励 每日签到系统变种        ["id","int"],                    #奖励编号        ["itemId","int"],                #奖励物品ID号        ["num","int"],                   #奖励物品个数        ["chance","int"],                #奖励该物品的几率    万分之一    """    _event_check_in_reward_config = client_configs['event_check_in_reward_config']    for item in _event_check_in_reward_config:        if item['id'] == config_id:            return item    return Nonedef get_all_event_check_in_reward_config_changes():    """        皮卡丘按摩的奖励 每日签到系统变种    """    _event_check_in_reward_config = client_configs['event_check_in_reward_config']    return _event_check_in_reward_configdef get_event_check_in_reward_config_changes(days):    """        皮卡丘按摩的奖励 每日签到系统变种    """    _event_check_in_reward_configs = get_all_event_check_in_reward_config_changes()    reward_configs = []    for item in _event_check_in_reward_configs:        if item['days'] == days:            reward_configs.append(item)    return reward_configsdef get_monster_type_config(monster_type):    """    怪类型表    """    _monster_type_config = client_configs['monster_type_config']    for item in _monster_type_config:        if item['id'] == monster_type:            return item    return Nonedef get_draw_package_contents(draw_type, package_number):    """    根据包id， 获取出来所有的行        ['id','int'],                  #物品ID        ['type','int'],                #物品分类        ['num','int'],                 #掉落物的数量        ['noDrop','int'],              #不掉落，1为不掉落        ['effect','string'],           #掉落时播放特效名字        ['packageNum','int'],          #分包ID        ['dropChance','int'],          #包内掉落几率，最大为100万        ['star','int'],                #掉落的宠物星级        ['block','int'],                #单抽屏蔽，1为屏蔽此项    """    draw_content = client_configs['draw_content_config']    if draw_type == game_define.DRAW_TYPE_ONE:        in_package = lambda x: x['packageNum'] == package_number and x['noDrop'] == 0 and x['block'] == 0    elif draw_type == game_define.DRAW_TYPE_TEN:        in_package = lambda x: x['packageNum'] == package_number and x['noDrop'] == 0    rows = filter(in_package, draw_content)    return rowsdef get_monster_skill(skill_id):    """    根据skill_id获取技能信息    """    is_same_skill = lambda x: x['skillID'] == skill_id    monster_skills = client_configs['monster_skill_config']    skill = filter(is_same_skill, monster_skills)[0]    return skilldef get_vip_config(vip_level):    """        ["vipLevel", "int"],               # Vip等级,默认为0级        ["RMB", "int"],                    # 获取该Vip等级所需的累计充值钱数        ["staminaPurchaseNum", "int"],            # vip等级对应购买体力的次数上限        ["goldPurchaseNum", "int"],               # vip等级对应购买金币的次数上限        #VIP赠礼        ["monsterId", "int"],                   # 奖励宠物ID        ["monsterStar", "int"],                 # 奖励宠物星级        ["itemId", "int"],                      # 奖励物品ID        ["itemNum", "int"],                     # 奖励物品数量        ["gold", "int"],                        # 奖励金币数量        ["vipInfo", "string"],                  # VIP奖励显示的详细信息        ["vipTitle", "string"],                 # 充值界面显示标题文字        ["fishingTimes","int"],                 #Vip钓鱼次数上限        ["fingerTimes","int"],                  #Vip每轮猜拳次数上限；每6小时重置1轮        ["stageTimes","int"],                   #Vip重置关卡次数上限    """    _vip_config = client_configs['vip_config']    select_vip_config = lambda x: x['vipLevel'] == vip_level    result = filter(select_vip_config, _vip_config)    if result:        return result[0]    return resultdef get_vip_level_by_rmb(rmb):    """    根据玩家花费的rmb来计算器vip level    """    vip_config = client_configs['vip_config']    vip_level = 0    for index, vip in enumerate(vip_config):        if rmb >= vip['RMB']:            vip_level = vip['vipLevel']        else:            break    return vip_leveldef get_buy_stamina_config(times):    configs = client_configs['stamina_purchase_config']    retval = None    for config in configs:        if config['num'] == times:            retval = config            break        pass    return retvaldef get_buy_gold_config(times):    configs = client_configs['gold_purchase_config']    retval = None    for config in configs:        if config['num'] == times:            retval = config            break        pass    return retvaldef get_task_config_root_task():    """    获取任务表中的根任务    """    _task_config = client_configs['task_config']    is_root = lambda x: x['taskRoot'] == 1    root_task = filter(is_root, _task_config)    return root_taskdef get_task_config(tid):    """    获取指定任务数据        ['id', 'int'],                  # 任务ID        ['taskName', 'string'],         # 任务名称        ['taskType', 'int'],            # 任务类型        ['num', 'int'],                 # 每日任务限制完成次数        ['nextTask', 'int'],            # 开启的下一个任务ID        ['playerLevel', 'int'],          # 开启条件：玩家等级        ['monsterLevel', 'int'],         # 开启条件：宠物最高等级        ['time', 'int'],                 # 开启条件：游戏时长，单位为分钟        ['monsterID', 'int'],            # 开启条件：拥有特定宠物ID        ['taskObject', 'int'],             # 任务目标类型        ['taskParameter1', 'int'],         # 任务目标参数1        ['taskParameter2', 'int'],         # 任务目标参数2        ['taskGoto', 'int'],               # 任务引导        ['stone', 'int'],             # 任务奖励1：钻石        ['gold', 'int'],              # 任务奖励2：金钱        ['exp', 'int'],               # 任务奖励3：玩家经验        ['stamina', 'int'],           # 任务奖励4：玩家体力        ['material', 'int'],          # 任务奖励5：材料ID        ['materialNum', 'int'],       # 任务奖励6：材料数量        ['equipment', 'int'],         # 任务奖励7：装备ID        ['monsterID', 'int'],         # 任务奖励8：宠物ID        ['monsterStar', 'int'],       # 任务奖励9：宠物星级        ['monsterColor', 'int'],      # 任务奖励10：宠物颜色        ['taskInfo', 'string']        # 任务说明文字    """    _task_config = client_configs['task_config']    is_root = lambda x: x['id'] == tid    index, task = utils.index_in_list(_task_config, is_root)    return taskdef get_next_task_config(task_id):    task_config = get_task_config(task_id)    next_task_id = task_config['nextTask']    next_task_config = get_task_config(next_task_id)    return next_task_configdef get_recharge_config(recharge_id):    """        充值相关            ["id","int"],                        #充值按钮ID            ["type","string"],                   #充值类型   month-月卡 one-单次付费充值            ["money","int"],                     #人民币价格            ["stone","int"],                     #获得钻石            #显示内容            ["title","string"],                   #标题文字            ["lable","string"],                   #按钮左上角标签显示内容，为0时不显示标签            ["info","string"]  ,                   #按钮显示文字            ["Eventstone","int"],                     #充值活动获得钻石            ["Eventinfo","string"] ,                    #活动显示文字    """    recharge_config = client_configs['recharge_config']    key = lambda x: x['id'] == recharge_id    index, config = utils.index_in_list(recharge_config, key)    return configdef get_all_recharge_config():    """        获取全部的充值相关    """    return client_configs['recharge_config']def get_recharge_month_config():    """    获取月卡表格    """    recharge_config = client_configs['recharge_config']    key = lambda x: x['type'] == 'month'    result = filter(key, recharge_config)    if result:        return result[0]    else:        return Nonedef get_equipment_config(equip_id):    """    获取装备表格       ['id','int'],         #物品ID        ['CHname','skip'],  #策划注释        ['type','int'],       #装备部位        ['quality','int'],    #品质        ['level','int'],      #等级限制   旧属性，作废        ['leadership','int'], #领导力        ['hp','int'],         #增加HP        ['speed','int'],      #增加速度        ['attack','int'],     #增加物攻        ['defense','int'],    #增加物防        ['spcAttack','int'],    #增加特攻        ['spcDefense','int'],   #增加特防        ['effortLevel','int'],           #强化等级上限        ['cost','int'],                  #强化所需材料数量        ['effect','int'],                #每一级强化属性提升值        ['gold','int'],                  #每一级强化花费金币        ['hole','int'],                  #打孔上限        ['exchange','int'],              #兑换价值    """    _equip_config = client_configs['equip_config']    select_equip = lambda config: config['id'] == equip_id    result = filter(select_equip, _equip_config)    if result:        return result[0]    return Nonedef get__equip_fragment_config(equip_id):    """    获取装备碎片表格        ["fragment1","int"],  #碎片ID        ["fragment2","int"],  #万能碎片ID        ["num","int"],     #所需碎片总数        ["equip","int"],      #合成的装备ID    """    _equip_fragment_config = client_configs['equip_fragment_config']    select_equip = lambda config: config['fragment1'] == equip_id    result = filter(select_equip, _equip_fragment_config)    if result:        return result[0]    return Nonedef get_finger_guess_config(guess_id):    """    获取猜拳数据表        Arg:            guess_id 猜拳ID        ["id","int"],                       #猜拳项目ID号        ["name","skip"],                    #策划注释        ["type","int"],                     #类型   0-为走正常随机几率 1-为VIP每次必出，仅可购买1次        ["chance","int"],                   #随机几率，最大10000        ["getItem","int"],                         #获取材料ID        ["getItemNum","int"],                      #获取材料数量        ["submitItem","int"],                       #提交材料ID        ["submitItemNum","int"],                    #提交材料数量        ["gold","int"],                             #金币数量        ["stone","int"]                             #钻石数量    """    _event_finger_guess = client_configs['event_finger_guess_config']    select_finger_guess = lambda config: config['id'] == guess_id    result = filter(select_finger_guess, _event_finger_guess)    if result:        return result[0]    return Nonedef get_finger_guess_ids():    """    获取所有的猜拳ID    """    _event_finger_guess = client_configs['event_finger_guess_config']    result_ids = []    for item in _event_finger_guess:        result_ids.append(item['id'])    return result_idsdef get_event_miao_bank(reward_id):    """        获取喵银行数据表            ["id","int"],                    #编号            ["level","int"],                 #玩家等级            ["VIPlevel","int"],                 #vip等级            ["stone","int"]                  #可领钻石    """    _event_miao_bank = client_configs['event_miao_bank_config']    select_event_miao_bank = lambda config: config['id'] == reward_id    result = filter(select_event_miao_bank, _event_miao_bank)    if result:        return result[0]    return Nonedef get_event_fishing_configs():    """        获取钓鱼表格            ["id","int"],                    #编号            ["chance","int"],                #随机出现几率  ，最大10000            ["gold","int"],                  #奖励金币的倍率            ["playerExp","int"],             #奖励经验的倍率            ["stone","int"],                 #玩家钻石的数量            ["item","int"],                  #钓鱼所获道具对应item表中的id            ["type","int"],                  #钓鱼所获道具的类型：1道具 2宠物碎片            ["num","int"],                   #钓鱼所获道具的数量    """    _event_fishing = client_configs['event_fishing_config']    return _event_fishingdef get_event_fishing_reward(level):    """        玩家钓鱼奖励基数        ["level","int"],                    #玩家等级        ["gold","int"],                     #奖励金币数量        ["playerExp","int"]                 #奖励玩家经验数量    """    _event_fishing_reward = client_configs['event_fishing_reward_config']    select_fishing_reward = lambda config: config['level'] == level    result = filter(select_fishing_reward, _event_fishing_reward)    if result:        return result[0]    return Nonedef get_reward_team_power(reward_id):    """    获取队伍战斗力奖励    """    _reward_team_power = client_configs['reward_team_power_config']    select_reward_team_power = lambda config: config['id'] == reward_id    result = filter(select_reward_team_power, _reward_team_power)    if result:        return result[0]    return Nonedef get_reward_level_config(reward_id):    """    获取等级奖励    """    _reward_level = client_configs['reward_level_config']    select_reward_level = lambda config: config['id'] == reward_id    result = filter(select_reward_level, _reward_level)    if result:        return result[0]    return Nonedef get_reward_monster_kind_config(reward_id):    """    获取怪种类奖励    """    _reward_monster_kind = client_configs['reward_monster_kind_config']    select_reward_monster_kind = lambda config: config['id'] == reward_id    result = filter(select_reward_monster_kind, _reward_monster_kind)    if result:        return result[0]    return Nonedef get_reward_monster_star_level_config(reward_id):    """    获取怪星级    """    _reward_monster_star_level_config = client_configs['reward_monster_star_config']    select_reward_monster_star_level_config = lambda config: config['id'] == reward_id    result = filter(select_reward_monster_star_level_config, _reward_monster_star_level_config)    if result:        return result[0]    return Nonedef get_reward_monster_quality_config(reward_id):    """    获取怪品质奖励    """    _reward_monster_quality_config = client_configs['reward_monster_quality_config']    select_reward_monster_quality_config = lambda config: config['id'] == reward_id    result = filter(select_reward_monster_quality_config, _reward_monster_quality_config)    if result:        return result[0]    return Nonedef get_reward_monster_level_config(reward_id):    """    获取怪品质奖励    """    _reward_monster_level_config = client_configs['reward_monster_level_config']    select_reward_monster_level_config = lambda config: config['id'] == reward_id    result = filter(select_reward_monster_level_config, _reward_monster_level_config)    if result:        return result[0]    return Nonedef get_guide_configs():    """        获取获取引导配置表格        {"gold": 30000, "idMonster": 56, "id": 1, "levelMonster": 1, "item2": 80010, "item3": 80011,  "item1": 80103, "item6": 80014, "item7": 80015,  "item4": 80012, "item5": 80013, "numMonster": 1, "itemNum5": 1, "itemNum4": 1, "itemNum7": 1,  "itemNum6": 1, "itemNum1": 2, "itemNum3": 1, "itemNum2": 1, "prefab": "GuiGuideUpgrade", "qualityMonster": 5,  "stone": 0, "name": "\u5347\u7ea7\u3001\u7a81\u7834", "idUnlock": 21, "starMonster": 2, "idEquip": 0},         ["id","int"],               #引导种类编号ID         ["idUnlock","int"],               #引导种类编号ID    ["name","string"],          #引导名称    ["levelPlayer","int"],      #触发引导的玩家等级    ["levelMonsterNeed","int"],     #触发引导的宠物等级，宠物达到对应等级，即触发引导    ["gold","int"],             #发送给玩家的金币数量    ["stone","int"],            #发送给玩家的钻石数量    ["idMonster","int"],        #发送给玩家的宠物ID    ["qualityMonster","int"],   #发送给玩家的宠物个体值    ["levelMonster","int"],     #发送给玩家的宠物等级    ["starMonster","int"],      #发送给玩家的宠物星级    ["numMonster","int"],       #发送给玩家的宠物数量    ["item1","int"],            #奖励物品1的id    ["itemNum1","int"],         #奖励物品1的数量    ["item2","int"],            #奖励物品2的id    ["itemNum2","int"],         #奖励物品2的数量    ["item3","int"],            #奖励物品3的id    ["itemNum3","int"],         #奖励物品3的数量    ["item4","int"],            #奖励物品4的id    ["itemNum4","int"],         #奖励物品4的数量    ["item5","int"],            #奖励物品5的id    ["itemNum5","int"],         #奖励物品5的数量    ["item6","int"],            #奖励物品6的id    ["itemNum6","int"],         #奖励物品6的数量    ["idEquip","int"],          #奖励装备的id    """    _guid_configs = client_configs['guide_config']    return _guid_configsdef get_guide_config(guide_id):    """    获取引导配置    ["id","int"],               #引导种类编号ID    ["idUnlock","int"],               #引导种类编号ID    ["name","string"],          #引导名称    ["levelPlayer","int"],      #触发引导的玩家等级    ["levelMonsterNeed","int"],     #触发引导的宠物等级，宠物达到对应等级，即触发引导    ["gold","int"],             #发送给玩家的金币数量    ["stone","int"],            #发送给玩家的钻石数量    ["idMonster","int"],        #发送给玩家的宠物ID    ["qualityMonster","int"],   #发送给玩家的宠物个体值    ["levelMonster","int"],     #发送给玩家的宠物等级    ["starMonster","int"],      #发送给玩家的宠物星级    ["numMonster","int"],       #发送给玩家的宠物数量    ["item1","int"],            #奖励物品1的id    ["itemNum1","int"],         #奖励物品1的数量    ["item2","int"],            #奖励物品2的id    ["itemNum2","int"],         #奖励物品2的数量    ["item3","int"],            #奖励物品3的id    ["itemNum3","int"],         #奖励物品3的数量    ["item4","int"],            #奖励物品4的id    ["itemNum4","int"],         #奖励物品4的数量    ["item5","int"],            #奖励物品5的id    ["itemNum5","int"],         #奖励物品5的数量    ["item6","int"],            #奖励物品6的id    ["itemNum6","int"],         #奖励物品6的数量    ["idEquip","int"],          #奖励装备的id    """    _guide_config = client_configs['guide_config']    select_guide_config = lambda config: config['id'] == guide_id    result = filter(select_guide_config, _guide_config)    if result:        return result[0]    return Nonedef get_newbie_phase_config(newbie_id):    """    新手引导奖励表格    """    _newbie_phase_config = client_configs['newbie_phase_config']    select_newbie_phase_config = lambda config: config['id'] == newbie_id    result = filter(select_newbie_phase_config, _newbie_phase_config)    if result:        return result[0]    return Nonedef get_reward_login_series_config_len():    """        获取列表长度    """    _reward_login_series_config = client_configs['reward_login_series_config']    return len(_reward_login_series_config)def get_reward_login_series_config(reward_id):    """        累计登录奖励 7行一循环 index - 0            ["id", "int"],                  #编号            ["levelMini", "int"],           #玩家等级下限            ["levelMax", "int"],            #玩家等级上限            ["days", "int"],                #玩家累计登录天数            ["gold", "int"],                #玩家获得金币数            ["stone", "int"],               #玩家获得钻石数            ["idMonster", "int"],           #玩家获得宠物ID            ["idMonsterQuality", "int"],    #玩家获得宠物颜色            ["idMonsterStar", "int"],       #玩家获得宠物星级            ["idMaterial", "int"],          #玩家获得材料ID            ["idMaterialNum", "int"],       #玩家获得材料数量            ["idEquip", "int"],             #玩家获得装备ID            ["note", "skip"],               #策划注释    """    _reward_login_series_config = client_configs['reward_login_series_config']    select_reward_login_series_config = lambda config: config['id'] == reward_id    result = filter(select_reward_login_series_config, _reward_login_series_config)    if result:        return result[0]    return Nonedef get_monster_band_configs():    """        获取怪绑定列表            ['bandId','int'],              #组合编号            ['monster1ID','int'],             #宠物1ID            ['monster2ID','int'],             #宠物2ID            ['monster3ID','int'],             #宠物3ID            ['monster4ID','int'],             #宠物4ID            ['monster5ID','int'],             #宠物5ID            ['name','string'],               #组合名称            ['info','string'],               #组合说明            ['num','int'],                   #组合人数            ['effect1ID','int'],           #效果1编号            ['effect1Class','int'],        #效果1等级            ['effect2ID','int'],           #效果2编号            ['effect2Class','int'],        #效果2等级    """    return client_configs['monster_band_config']def get_monster_band_effect_config(config_id):    """        获取怪组合效果表格            ['id','int'],              #id            ['info','string'],          #策划注释说明            ['effectIcon','string'],    #效果小图标文件名            ['effectType','int'],      #效果类型0-百分比数值，1百分比数值，2固定数值            ['effect1','int'],         #效果1级参数            ['effect2','int'],         #效果2级参数            ['effect3','int'],         #效果3级参数            ['effect4','int'],         #效果4级参数            ['effect5','int'],         #效果5级参数            ['effect6','int']          #效果6级参数    """    _monster_band_effect_config = client_configs['monster_band_effect_config']    select_monster_band_effect_config = lambda config: config['id'] == config_id    result = filter(select_monster_band_effect_config, _monster_band_effect_config)    if result:        return result[0]    return Nonedef get_exchange_config(config_id):    """        获取怪交换表            ["id","int"],                      #期数        #宠物1            ["idMonster1","int"],               #同期内宠物编号            ["star1","int"],                    #宠物星级            ["quality1","int"],                 #宠物颜色            ["price1","int"],                   #消耗积分数            ["des1","string"],                  #宠物描述        #宠物2            ["idMonster2","int"],               #同期内宠物编号            ["star2","int"],                    #宠物星级            ["quality2","int"],                 #宠物颜色            ["price2","int"],                   #消耗积分数            ["des2","string"],                  #宠物描述    """    _exchange_config = client_configs['exchange_config']    select_exchange_config = lambda config: config['id'] == config_id    result = filter(select_exchange_config, _exchange_config)    if result:        return result[0]    return Nonedef get_exchange_config_len():    """        获取交换怪表长度    """    return len(client_configs['exchange_config'])def get_the_title_config(config_id):    """        获取爵位表格        ["id","int"],            #称号编号        ["title","string"],      #称号        ["color","string"],      #名称颜色        ["prestige","int"],            #需要荣誉值        ["gold","int"],                #消耗金币        ["leadship","int"],                #额外领导力        ["hp","int"],                   #奖励血量        ["damange","float"],            #奖励额外伤害百分比        ["disDamange","float"],         #奖励免伤百分比        #每日领取        ["dayGold","int"],                #每日金币        ["dayStone","int"],               #每日钻石        ["dayItemId","int"],                #每日物品ID        ["dayItemNum","int"],               #每日物品数量    """    _the_title_config = client_configs['the_title_config']    select_title_config = lambda config: config['id'] == config_id    result = filter(select_title_config, _the_title_config)    if result:        return result[0]    return Nonedef get_rank_search_config(player_rank):    """        获取竞技场排名搜索规则表        ["minRank","int"],   #起始排名ID        ["maxRank","int"],   #终止排名ID        ["min1","float"],          #1位置搜索范围下限        ["max1","float"],          #1位置搜索范围上限        ["min2","float"],          #2位置搜索范围下限        ["max2","float"],          #2位置搜索范围上限        ["min3","float"],          #3位置搜索范围下限        ["max3","float"],          #3位置搜索范围上限        ["min4","float"],          #4位置搜索范围下限        ["max4","float"],          #4位置搜索范围上限        ["min5","float"],          #5位置搜索范围下限        ["max5","float"],          #5位置搜索范围上限        ["min6","float"],          #6位置搜索范围下限        ["max6","float"],          #6位置搜索范围上限        ["min7","float"],          #7位置搜索范围下限        ["max7","float"],          #7位置搜索范围上限        ["min8","float"],          #8位置搜索范围下限        ["max8","float"],          #8位置搜索范围上限    """    _rank_search_config = client_configs['rank_search_config']    select_rank_search_config = lambda config: config['minRank'] <= player_rank <= config['maxRank']    result = filter(select_rank_search_config, _rank_search_config)    if result:        return result[0]    return Nonedef get_rank_config(player_rank):    """        获取竞技场排行表            ["minRank","int"],   #起始排名ID            ["maxRank","int"],   #终止排名ID            ["prestige","int"],          #发放荣誉值    """    _rank_config = client_configs['rank_config']    select_rank_config = lambda config: config['minRank'] <= player_rank <= config['maxRank']    result = filter(select_rank_config, _rank_config)    if result:        return result[0]    return Nonedef get_server_list_config():    """        获取游戏 服务器列表            ['serverId', 'int']  ,  # 服务器编号            ['name', 'string'],     # 服务器名称            ['ip', 'string'],         # IP            ['domain', 'string'],    # 域名            ['platform', 'string'],  # 平台            ['callback', 'string'],  # 回调接口            ['status', 'int']  ,     # 服务器状态说明    """    _server_list_config = client_configs['server_list']    return _server_list_configdef get_robot_data_config(rank):    """        获取竞技场机器人数据            ["id","int"],   #排名ID，ID为1到999的机器人，为排行榜占位机器人，排名1000以上的机器人为其他NPC机器人。            ["name","string"],                    #NPC机器人名字。            ["monster1Detail","string"],          #宠物1数据            ["monster2Detail","string"],          #宠物2数据            ["monster3Detail","string"],          #宠物3数据            ["monster4Detail","string"],          #宠物4数据            ["monster5Detail","string"],          #宠物5数据    """    _robot_data_config = client_configs['robot_data_config']    select_robot_data_config = lambda config: config['id'] == rank    result = filter(select_robot_data_config, _robot_data_config)    if result:        return result[0]    return Nonedef get_catch_monster_config(config_id):    """        获取抓宠表            ["id", "int"],                  #活动期数            ["map1Id", "int"],              #地图1            ["map2Id", "int"],              #地图2            ["map3Id", "int"],              #地图3    """    _catch_monster_config = client_configs['catch_monster_config']    select_catch_monster_config = lambda config: config['id'] == config_id    result = filter(select_catch_monster_config, _catch_monster_config)    if result:        return result[0]    return Nonedef get_reward_vip_daily_config(vip_level):    """        获取每日VIP奖励表格            ["id","int"],                    #奖励编号            ["levelVIP","int"],              #对应VIP等级            ["stone","int"],                 #奖励钻石数            ["gold","int"],                  #奖励金币数            ["freeDraw","int"],              #奖励免费抽奖球个数            ["idMonster","int"],             #奖励宠物id            ["qualityMonster","int"],        #奖励宠物颜色            ["starMonster","int"],           #奖励宠物星级            ["item1","int"],                 #奖励物品1的id            ["itemNum1","int"],              #奖励物品1的数量            ["item2","int"],                 #奖励物品2的id            ["itemNum2","int"],              #奖励物品2的数量            ["item2","int"],                 #奖励物品3的id            ["itemNum2","int"],              #奖励物品3的数量            ["equip","int"],                 #奖励装备id    """    _reward_vip_daily_config = client_configs['reward_vip_daily_config']    select_reward_vip_daily_config = lambda config: config['levelVIP'] == vip_level    result = filter(select_reward_vip_daily_config, _reward_vip_daily_config)    if result:        return result[0]    return Nonedef get_all_stone_shop_config():    """        获取钻石商场表格        ["id", "int"],                   # 商品ID        ["packgeId", "int"],             # 商品分类        ["item", "int"],                 # 物品ID        ["num", "int"],                  # 物品数量        ["price", "int"],                # 物品钻石售价        ["chance", "int"],               # 出现几率    """    _stone_shop_config = client_configs['stone_shop_config']    return _stone_shop_configdef get_stone_shop_with_package(package_id):    """        用包ID 获取对应的物品列表    """    _stone_shop_config = client_configs['stone_shop_config']    select_stone_shop_config = lambda x: x['packgeId'] == package_id    result = filter(select_stone_shop_config, _stone_shop_config)    return resultdef get_stone_shop_with_id(config_id):    """        用表ID 获取对应的物品列表    """    _stone_shop_config = client_configs['stone_shop_config']    select_stone_shop_config = lambda x: x['id'] == config_id    result = filter(select_stone_shop_config, _stone_shop_config)    if result:        return result[0]    return Nonedef get_all_ditto_shop_config():    """        获取百变怪商场表格        ["id", "int"],                   # 项目ID        ["monsterId", "int"],             # 宠物ID        ["price", "int"],                 # 宠物价格        ["color", "int"],                  # 宠物颜色        ["star", "int"],                # 宠物星级        ["check", "int"],               # 排除    """    _ditto_shop_config = client_configs['ditto_shop_config']    return _ditto_shop_configdef get_ditto_shop_with_id(config_id):    """        用ID 获取对应的百变怪        ["id", "int"],                   # 项目ID        ["monsterId", "int"],             # 宠物ID        ["price", "int"],                 # 宠物价格        ["color", "int"],                  # 宠物颜色        ["star", "int"],                # 宠物星级        ["check", "int"],               # 排除    """    _ditto_shop_config = client_configs['ditto_shop_config']    if str(config_id) in _ditto_shop_config:        return _ditto_shop_config[str(config_id)]    return Nonedef get_all_daily_task_config():    """        ["id", "int"],               #每日任务编号        ["name", "string"],          #每日任务描述对应StingDefine表中的string        ["minLevel", "int"],         #该任务出现时的最小等级；低于此等级，该任务不出现        ["maxLevel", "int"],         #该任务出现时的最大等级；高于此等级，该任务不出现        ["score", "int"],            #达成该任务，可获得的任务点数        ["num", "int"],              #达成该任务，需完成的同名操作次数        ["goto", "skip"],            #达成该任务所需前往的页面        ["stone", "int"],            #达成该任务可额外获得的钻石        ["gold", "int"],             #达成该任务可额外获得的金币        ["freeDraw", "int"],         #达成该任务可额外获得宝贝球        ["item", "int"],             #达成该任务可额外获得的物品        ["itemNum", "int"],          #达成该任务可额外获得物品数量    """    _daily_task_configs = client_configs['daily_task_config']    return _daily_task_configsdef get_all_reward_seven_level_config():    """    {"monsterId": 0, "stone": 30, "pokeBall": 0, "num1": 5, "gold": 10000, "num3": 0, "item2": 0, "item3": 0,  "item1": 80048, "equipmentId": 0, "experience": 0, "monsterStar": 0, "playerLevel": 5, "num2": 0, "id": 1}    """    _reward_seven_level_configs = client_configs['reward_seven_level_config']    return _reward_seven_level_configsdef get_all_reward_seven_power_config():    """    {"monsterId": 0, "stone": 30, "pokeBall": 0, "num1": 5, "gold": 10000, "num3": 0, "item2": 0, "item3": 0,  "item1": 80048, "equipmentId": 0, "experience": 0, "monsterStar": 0, "playerLevel": 5, "num2": 0, "id": 1}    """    _reward_seven_power_configs = client_configs['reward_seven_power_config']    return _reward_seven_power_configsdef get_all_reward_times_normal_stage_config():    """    {"stone": 50, "pokeBall": 1, "num1": 0, "gold": 0, "num3": 0, "item2": 0, "item3": 0, "item1": 0,  "equipmentId": 0, "experience": 100, "times": 10, "num2": 0, "id": 1},    """    _reward_times_normal_stage_configs = client_configs['reward_times_normal_stage_config']    return _reward_times_normal_stage_configsdef get_all_reward_times_hard_stage_config():    """    {"stone": 50, "pokeBall": 1, "num1": 0, "gold": 0, "num3": 0, "item2": 0, "item3": 0, "item1": 0,  "equipmentId": 0, "experience": 100, "times": 10, "num2": 0, "id": 1},    """    _reward_times_hard_stage_configs = client_configs['reward_times_hard_stage_config']    return _reward_times_hard_stage_configsdef get_all_reward_times_arena_config():    """    {"stone": 50, "pokeBall": 1, "num1": 0, "gold": 0, "num3": 0, "item2": 0, "item3": 0, "item1": 0,  "equipmentId": 0, "experience": 100, "times": 10, "num2": 0, "id": 1},    """    _reward_times_arena_configs = client_configs['reward_times_arena_config']    return _reward_times_arena_configsdef get_all_reward_times_gym_config():    """    {"stone": 50, "pokeBall": 1, "num1": 0, "gold": 0, "num3": 0, "item2": 0, "item3": 0, "item1": 0,  "equipmentId": 0, "experience": 100, "times": 10, "num2": 0, "id": 1},    """    _reward_times_gym_configs = client_configs['reward_times_gym_config']    return _reward_times_gym_configsdef get_all_reward_times_treasure_config():    """    {"stone": 50, "pokeBall": 1, "num1": 0, "gold": 0, "num3": 0, "item2": 0, "item3": 0, "item1": 0,  "equipmentId": 0, "experience": 100, "times": 10, "num2": 0, "id": 1},    """    _reward_times_treasure_configs = client_configs['reward_times_treasure_config']    return _reward_times_treasure_configsdef get_all_reward_time_recharge_short_config():    """        {"monsterId": 0, "stone": 0, "pokeBall": 5, "num1": 1000, "gold": 200000000, "num3": 0, "item2": 0, "money": 20000,    "item1": 80008, "equipmentId": 0, "experience": 0, "item3": 0, "monsterStar": 0, "num2": 0, "id": 16}    """    _reward_time_recharge_short_configs = client_configs['reward_time_recharge_short_config']    return _reward_time_recharge_short_configsdef get_all_reward_time_recharge_long_config():    """        {"monsterId": 0, "stone": 0, "pokeBall": 5, "num1": 1000, "gold": 200000000, "num3": 0, "item2": 0, "money": 20000,    "item1": 80008, "equipmentId": 0, "experience": 0, "item3": 0, "monsterStar": 0, "num2": 0, "id": 16}    """    _reward_time_recharge_long_configs = client_configs['reward_time_recharge_long_config']    return _reward_time_recharge_long_configsdef get_all_reward_times_fishing_config():    """    {"stone": 50, "pokeBall": 1, "num1": 0, "gold": 0, "num3": 0, "item2": 0, "item3": 0, "item1": 0,  "equipmentId": 0, "experience": 100, "times": 10, "num2": 0, "id": 1},    """    _reward_times_fishing_configs = client_configs['reward_times_fishing_config']    return _reward_times_fishing_configsdef get_all_reward_times_finger_guess_config():    """    {"stone": 50, "pokeBall": 1, "num1": 0, "gold": 0, "num3": 0, "item2": 0, "item3": 0, "item1": 0,  "equipmentId": 0, "experience": 100, "times": 10, "num2": 0, "id": 1},    """    _reward_times_finger_guess_configs = client_configs['reward_times_finger_guess_config']    return _reward_times_finger_guess_configsdef get_all_reward_stone_consumption_config():    """    {"stone": 50, "pokeBall": 1, "num1": 0, "gold": 0, "num3": 0, "item2": 0, "item3": 0, "item1": 0,  "equipmentId": 0, "times": 10, "num2": 0, "id": 1},    """    _reward_stone_consumption_configs = client_configs['reward_stone_consumption_config']    return _reward_stone_consumption_configsdef get_all_reward_one_recharge_config():    """ 单笔充值        {"monsterId": 0, "stone": 0, "pokeBall": 5, "num1": 1000, "gold": 200000000, "num3": 0, "item2": 0, "money": 20000,    "item1": 80008, "equipmentId": 0, "experience": 0, "item3": 0, "monsterStar": 0, "num2": 0, "id": 16}    """    _reward_one_recharge_configs = client_configs['reward_one_recharge_config']    return _reward_one_recharge_configsdef get_all_time_limited_shift_shop_config():    """ 友好商店        {"goldGet": 0, "stoneGet": 0, "stoneNeed": 100, "idItemGet": 80303, "numItemGet": 120, "freeDrawGet": 0, "numItemNeed2": 0,         "leftTimes": 1, "idItemNeed1": 81143, "idItemNeed2": 0, "goldNeed": 0, "id": 12, "numItemNeed1": 5}    """    _all_time_limited_shift_shop_configs = client_configs['time_limited_shift_shop_config']    return _all_time_limited_shift_shop_configsdef get_all_time_limited_shop_config():    """ 便利商店        {"goldGet": 0, "stoneGet": 0, "stoneNeed": 0, "idItemGet": 80048, "numItemGet": 10, "numItemNeed": 1,        "idItemNeed": 82009, "leftTimes": 1,"freeDrawGet": 0, "goldNeed": 0, "id": 12}}    """    _all_time_limited_shop_configs = client_configs['time_limited_shop_config']    return _all_time_limited_shop_configsdef get_all_holiday_shop_config():    """ 假日商店        {"goldGet": 0, "stoneGet": 0, "stoneNeed": 0, "idItemGet": 80048, "numItemGet": 10, "numItemNeed": 1,        "idItemNeed": 82009, "leftTimes": 1,"freeDrawGet": 0, "goldNeed": 0, "id": 12}}    """    _all_holiday_shop_configs = client_configs['holiday_shop_config']    return _all_holiday_shop_configsdef get_all_reward_share_weixin_config():    """ 微信分享        {"itemId": 0, "stone": 500, "star": 0, "power": 0, "gold": 0, "freeDrop": 0, "itemNum": 0, "playerLevel": 50,         "id": 5, "stage": 0}    """    _all_reward_share_weixin_configs = client_configs['reward_share_weixin_config']    return _all_reward_share_weixin_configsdef get_all_regist_recharge_config():    """  30天豪华充值签到         {"itemId": 81373, "stone": 0, "gold": 0, "freeDrop": 0, "itemNum": 10, "id": 30}    """    _all_regist_recharge_configs = client_configs['regist_recharge_config']    return _all_regist_recharge_configsdef get_seven_power_config_with_id(config_id):    """        {"monsterId": 0, "stone": 30, "pokeBall": 0, "num1": 5, "gold": 10000, "num3": 0, "item2": 0, "item3": 0,  "item1": 80048, "equipmentId": 0, "experience": 0, "monsterStar": 0, "playerLevel": 5, "num2": 0, "id": 1}    """    _reward_seven_power_configs = client_configs['reward_seven_power_config']    if str(config_id) in _reward_seven_power_configs:        return _reward_seven_power_configs[str(config_id)]    return Nonedef get_times_normal_stage_config_with_id(config_id):    """        {"monsterId": 0, "stone": 30, "pokeBall": 0, "num1": 5, "gold": 10000, "num3": 0, "item2": 0, "item3": 0,  "item1": 80048, "equipmentId": 0, "experience": 0, "monsterStar": 0, "playerLevel": 5, "num2": 0, "id": 1}    """    _reward_times_normal_stage_configs = client_configs['reward_times_normal_stage_config']    if str(config_id) in _reward_times_normal_stage_configs:        return _reward_times_normal_stage_configs[str(config_id)]    return Nonedef get_times_hard_stage_config_with_id(config_id):    """        {"monsterId": 0, "stone": 30, "pokeBall": 0, "num1": 5, "gold": 10000, "num3": 0, "item2": 0, "item3": 0,  "item1": 80048, "equipmentId": 0, "experience": 0, "monsterStar": 0, "playerLevel": 5, "num2": 0, "id": 1}    """    _reward_times_hard_stage_configs = client_configs['reward_times_hard_stage_config']    if str(config_id) in _reward_times_hard_stage_configs:        return _reward_times_hard_stage_configs[str(config_id)]    return Nonedef get_reward_times_arena_config_with_id(config_id):    """        {"monsterId": 0, "stone": 30, "pokeBall": 0, "num1": 5, "gold": 10000, "num3": 0, "item2": 0, "item3": 0,  "item1": 80048, "equipmentId": 0, "experience": 0, "monsterStar": 0, "playerLevel": 5, "num2": 0, "id": 1}    """    _reward_times_arena_configs = client_configs['reward_times_arena_config']    if str(config_id) in _reward_times_arena_configs:        return _reward_times_arena_configs[str(config_id)]    return Nonedef get_times_gym_config_with_id(config_id):    """        {"monsterId": 0, "stone": 30, "pokeBall": 0, "num1": 5, "gold": 10000, "num3": 0, "item2": 0, "item3": 0,  "item1": 80048, "equipmentId": 0, "experience": 0, "monsterStar": 0, "playerLevel": 5, "num2": 0, "id": 1}    """    _reward_times_gym_configs = client_configs['reward_times_gym_config']    if str(config_id) in _reward_times_gym_configs:        return _reward_times_gym_configs[str(config_id)]    return Nonedef get_times_treasure_config_with_id(config_id):    """        {"monsterId": 0, "stone": 30, "pokeBall": 0, "num1": 5, "gold": 10000, "num3": 0, "item2": 0, "item3": 0,  "item1": 80048, "equipmentId": 0, "experience": 0, "monsterStar": 0, "playerLevel": 5, "num2": 0, "id": 1}    """    _reward_times_treasure_configs = client_configs['reward_times_treasure_config']    if str(config_id) in _reward_times_treasure_configs:        return _reward_times_treasure_configs[str(config_id)]    return Nonedef get_reward_time_recharge_short_config_with_id(config_id):    """        {"monsterId": 0, "stone": 0, "pokeBall": 5, "num1": 1000, "gold": 200000000, "num3": 0, "item2": 0, "money": 20000,    "item1": 80008, "equipmentId": 0, "experience": 0, "item3": 0, "monsterStar": 0, "num2": 0, "id": 16}    """    _reward_configs = client_configs['reward_time_recharge_short_config']    if str(config_id) in _reward_configs:        return _reward_configs[str(config_id)]    return Nonedef get_reward_time_recharge_long_config_with_id(config_id):    """        长期限时充值    """    _reward_configs = client_configs['reward_time_recharge_long_config']    if str(config_id) in _reward_configs:        return _reward_configs[str(config_id)]    return Nonedef get_times_fishing_config_with_id(config_id):    """        {"monsterId": 0, "stone": 30, "pokeBall": 0, "num1": 5, "gold": 10000, "num3": 0, "item2": 0, "item3": 0,  "item1": 80048, "equipmentId": 0, "experience": 0, "monsterStar": 0, "playerLevel": 5, "num2": 0, "id": 1}    """    _reward_times_fishing_configs = client_configs['reward_times_fishing_config']    if str(config_id) in _reward_times_fishing_configs:        return _reward_times_fishing_configs[str(config_id)]    return Nonedef get_times_finger_guess_config_with_id(config_id):    """        {"monsterId": 0, "stone": 30, "pokeBall": 0, "num1": 5, "gold": 10000, "num3": 0, "item2": 0, "item3": 0,  "item1": 80048, "equipmentId": 0, "experience": 0, "monsterStar": 0, "playerLevel": 5, "num2": 0, "id": 1}    """    _reward_times_finger_guess_configs = client_configs['reward_times_finger_guess_config']    if str(config_id) in _reward_times_finger_guess_configs:        return _reward_times_finger_guess_configs[str(config_id)]    return Nonedef get_reward_stone_consumption_config_with_id(config_id):    """    {"stone": 50, "pokeBall": 1, "num1": 0, "gold": 0, "num3": 0, "item2": 0, "item3": 0, "item1": 0,  "equipmentId": 0, "times": 10, "num2": 0, "id": 1},    """    _reward_stone_consumption_configs = client_configs['reward_stone_consumption_config']    if str(config_id) in _reward_stone_consumption_configs:        return _reward_stone_consumption_configs[str(config_id)]    return Nonedef get_reward_one_recharge_config_with_id(config_id):    """ 单笔充值        {"monsterId": 0, "stone": 0, "pokeBall": 5, "num1": 1000, "gold": 200000000, "num3": 0, "item2": 0, "money": 20000,    "item1": 80008, "equipmentId": 0, "experience": 0, "item3": 0, "monsterStar": 0, "num2": 0, "id": 16}    """    _reward_reward_one_recharge_config_configs = client_configs['reward_one_recharge_config']    if str(config_id) in _reward_reward_one_recharge_config_configs:        return _reward_reward_one_recharge_config_configs[str(config_id)]    return Nonedef get_time_limited_shift_shop_config_with_id(config_id):    """ 友好商店        {"goldGet": 0, "stoneGet": 0, "stoneNeed": 100, "idItemGet": 80303, "numItemGet": 120, "freeDrawGet": 0, "numItemNeed2": 0,         "leftTimes": 1, "idItemNeed1": 81143, "idItemNeed2": 0, "goldNeed": 0, "id": 12, "numItemNeed1": 5}    """    _time_limited_shift_shop_config = client_configs['time_limited_shift_shop_config']    if str(config_id) in _time_limited_shift_shop_config:        return _time_limited_shift_shop_config[str(config_id)]    return Nonedef get_time_limited_shop_config_with_id(config_id):    """ 便利商店        {"goldGet": 0, "stoneGet": 0, "stoneNeed": 0, "idItemGet": 80048, "numItemGet": 10, "numItemNeed": 1,        "idItemNeed": 82009, "leftTimes": 1,"freeDrawGet": 0, "goldNeed": 0, "id": 12}}    """    _time_limited_shop_config = client_configs['time_limited_shop_config']    if str(config_id) in _time_limited_shop_config:        return _time_limited_shop_config[str(config_id)]    return Nonedef get_holiday_shop_config_with_id(config_id):    """ 假日商店        {"goldGet": 0, "stoneGet": 0, "stoneNeed": 0, "idItemGet": 80048, "numItemGet": 10, "numItemNeed": 1,        "idItemNeed": 82009, "leftTimes": 1,"freeDrawGet": 0, "goldNeed": 0, "id": 12}}    """    _holiday_shop_config = client_configs['holiday_shop_config']    if str(config_id) in _holiday_shop_config:        return _holiday_shop_config[str(config_id)]    return Nonedef get_reward_share_weixin_config_with_id(config_id):    """ 微信分享        {"itemId": 0, "stone": 500, "star": 0, "power": 0, "gold": 0, "freeDrop": 0, "itemNum": 0, "playerLevel": 50,         "id": 5, "stage": 0}    """    _reward_share_weixin_config = client_configs['reward_share_weixin_config']    if str(config_id) in _reward_share_weixin_config:        return _reward_share_weixin_config[str(config_id)]    return Nonedef get_regist_recharge_config_with_id(config_id):    """  30天豪华充值签到         {"itemId": 81373, "stone": 0, "gold": 0, "freeDrop": 0, "itemNum": 10, "id": 30}    """    _regist_recharge_config = client_configs['regist_recharge_config']    if str(config_id) in _regist_recharge_config:        return _regist_recharge_config[str(config_id)]    return Nonedef get_seven_level_config_with_id(config_id):    """        {"monsterId": 0, "stone": 30, "pokeBall": 0, "num1": 5, "gold": 10000, "num3": 0, "item2": 0, "item3": 0,  "item1": 80048, "equipmentId": 0, "experience": 0, "monsterStar": 0, "playerLevel": 5, "num2": 0, "id": 1}    """    _reward_seven_level_config = client_configs['reward_seven_level_config']    if str(config_id) in _reward_seven_level_config:        return _reward_seven_level_config[str(config_id)]    return Nonedef get_daily_task_with_id(config_id):    """        ["id", "int"],               #每日任务编号        ["name", "string"],          #每日任务描述对应StingDefine表中的string        ["minLevel", "int"],         #该任务出现时的最小等级；低于此等级，该任务不出现        ["maxLevel", "int"],         #该任务出现时的最大等级；高于此等级，该任务不出现        ["score", "int"],            #达成该任务，可获得的任务点数        ["num", "int"],              #达成该任务，需完成的同名操作次数        ["goto", "skip"],            #达成该任务所需前往的页面        ["stone", "int"],            #达成该任务可额外获得的钻石        ["gold", "int"],             #达成该任务可额外获得的金币        ["freeDraw", "int"],         #达成该任务可额外获得宝贝球        ["item", "int"],             #达成该任务可额外获得的物品        ["itemNum", "int"],          #达成该任务可额外获得物品数量    """    _daily_task_config = client_configs['daily_task_config']    if str(config_id) in _daily_task_config:        return _daily_task_config[str(config_id)]    return Nonedef get_reward_daily_task_with_id(config_id):    """        用ID 获取每日任务奖励        [{"freeDraw": 0, "stone": 0, "gold": 10000, "levelRewardPoint": 20, "levelReward": 1, "item": 0, "num": 0, "id": 1},    """    _reward_daily_task_config = client_configs['reward_daily_task_config']    # print(_reward_daily_task_config)    if str(config_id) in _reward_daily_task_config:        # print(config_id)        return _reward_daily_task_config[str(config_id)]    return Nonedef get_trial_enemy_config(player_level):    """        玩家队伍战斗力获取试炼表格            ["id","int"],                      #随机敌人方案编号            ["playerLevelMin","int"],          #玩家等级最小  大于等于            ["playerLevelMax","int"],          #玩家等级最大  小于等于            #敌人属性范围            ["minLevel","int"],              #最小等级            ["maxLevel","int"],              #最大等级            ["star3","int"],              #3星敌人出现几率            ["star4","int"],              #4星敌人出现几率            ["star5","int"],              #5星敌人出现几率            ["minIndividual","int"],          #最小个体值            ["maxIndividual","int"],          #最大个体值            ["1enemyChance","int"],              #1个敌人出现几率            ["2enemyChance","int"],              #2个敌人出现几率            ["3enemyChance","int"],              #3个敌人出现几率            ["4enemyChance","int"],              #4个敌人出现几率            ["5enemyChance","int"],              #5个敌人出现几率            ["6enemyChance","int"],              #6个敌人出现几率            ["7enemyChance","int"],              #7个敌人出现几率            ["8enemyChance","int"],              #8个敌人出现几率            ["9enemyChance","int"],              #9个敌人出现几率    """    _trial_enemy_config = client_configs['trial_enemy_config']    select_trial_enemy_config = lambda x: x['playerLevelMin'] <= player_level <= x['playerLevelMax']    result = filter(select_trial_enemy_config, _trial_enemy_config)    if result:        return result[0]    return Nonedef get_all_trial_reward_config():    """        获取玩家试炼奖励        ["id","int"],                    #奖励编号        ["type","int"],                  #奖励分组        ["itemId","int"],                #奖励物品ID号        ["num","int"],                   #奖励物品个数        ["chance","int"],                #奖励该物品的几率    万分之一    """    return client_configs['trial_reward_config']def get_trial_reward_config(config_id):    """        获取玩家试炼奖励    """    _trial_reward_config = client_configs['trial_reward_config']    select_trial_reward_config = lambda x: x['id'] == config_id    result = filter(select_trial_reward_config, _trial_reward_config)    if result:        return result[0]    return Nonedef get_reward_recharge_first_config():    """        获取首冲礼包奖励表        "itemNum1": 5, "idMonster": 92, "item1": 80102, "equipmentId": 60068, "equipmentNum": 1, "star": 3, "quality": 3, "id": 1            ["id","int"],         #奖励id            ["stone","int"],      #奖励钻石数            ["gold","int"],       #奖励金币数            ["freeDraw","int"],   #奖励宝贝球数            ["item1","int"],      #奖励物品1的id            ["itemNum1","int"],   #奖励物品1的数量            ["item2","int"],      #奖励物品2的id            ["itemNum2","int"],   #奖励物品2的数量            ["item3","int"],      #奖励物品3的id            ["itemNum3","int"],   #奖励物品3的数量            ["idMonster","int"],  #奖励宠物的id            ["star","int"],       #奖励宠物的星级            ["quality","int"],    #奖励宠物的颜色    """    _reward_recharge_first_config = client_configs['reward_recharge_first_config']    return _reward_recharge_first_config[0]def get_all_reward_recharge_daily_config():    """        获取全部的每日充值奖励表    """    return client_configs['reward_recharge_daily_config']def get_reward_recharge_daily_config(reward_id):    """        每日充值奖励            ["id","int"],         #奖励id            ["sumDaily","int"],   #单日充值人民币累计总数，大于此数可领奖            ["stone","int"],      #奖励钻石数            ["gold","int"],       #奖励金币数            ["freeDraw","int"],   #奖励宝贝球数            ["item1","int"],      #奖励物品1的id            ["itemNum1","int"],   #奖励物品1的数量            ["item2","int"],      #奖励物品2的id            ["itemNum2","int"],   #奖励物品2的数量            ["item3","int"],      #奖励物品3的id            ["itemNum3","int"],   #奖励物品3的数量    """    _reward_recharge_daily_config = client_configs['reward_recharge_daily_config']    select_reward_recharge_daily_config = lambda x: x['id'] == reward_id    result = filter(select_reward_recharge_daily_config, _reward_recharge_daily_config)    if result:        return result[0]    return Nonedef get_all_reward_recharge_sum_config():    """        获取全部的累计充值奖励表    """    return client_configs['reward_recharge_sum_config']def get_all_reward_level_config():    """        获取冲级礼包奖励表    """    return client_configs['reward_level_config']def get_reward_recharge_sum_config(reward_id):    """        累计充值奖励        ["id","int"],         #奖励id        ["sumDaily","int"],   #活动期间，充值人民币累计总数，大于此数可领奖        ["stone","int"],      #奖励钻石数        ["gold","int"],       #奖励金币数        ["freeDraw","int"],   #奖励宝贝球数        ["item1","int"],      #奖励物品1的id        ["itemNum1","int"],   #奖励物品1的数量        ["idMonster","int"],  #奖励宠物的id        ["star","int"],       #奖励宠物的星级        ["quality","int"],    #奖励宠物的颜色        ["equip","int"],      #奖励装备的id    """    _reward_recharge_sum_config = client_configs['reward_recharge_sum_config']    select_reward_recharge_sum_config = lambda x: x['id'] == reward_id    result = filter(select_reward_recharge_sum_config, _reward_recharge_sum_config)    if result:        return result[0]    return Nonedef get_quiz_config(quiz_id):    """        获取玩家题目表格        ["id", "int"],                   #问答题目编号        ["quizType", "int"],             #问答题目类型        ["quiz", "string"],              #问答题目内容        ["answerRight", "string"],       #问答题目的正确答案        ["answerWrong1", "string"],      #问答题目的错误答案1        ["answerWrong2", "string"],      #问答题目的错误答案2    """    _quiz_config = client_configs['quiz_config']    quiz_id_str = str(quiz_id)    if quiz_id_str in _quiz_config:        return _quiz_config[quiz_id_str]    return Nonedef get_quiz_config_lst(quiz_type):    """        获取所有某种类题目    """    _quiz_config = client_configs['quiz_config']    result = []    for key, val in _quiz_config.items():        if val['quizType'] == quiz_type:            result.append(val)    return resultdef get_all_invitation_reward_config():    """        获取全部的玩家奖励表格        ["id", "int"],                  # 编号        ["playerLevel", "int"],         # 玩家等级到达多少级别        #奖励清单        ["gold", "int"],            # 金币奖励        ["stone", "int"],           # 钻石奖励        ["itemId", "int"],          # 物品id        ["itemNum", "int"],         # 物品数量        ["monsterId", "int"],          # 宠物id        ["monsterStar", "int"],        # 宠物星级品质        ["monsterColor", "int"],       # 宠物颜色品质        ["rewardInfo", "string"],       # 奖励说明信息    """    _invitation_reward_configs = client_configs['invitation_reward_config']    return _invitation_reward_configsdef get_invitation_reward_config(reward_id):    """        获取玩家邀请奖励    """    _invitation_reward_configs = client_configs['invitation_reward_config']    reward_id_str = str(reward_id)    if reward_id_str in _invitation_reward_configs:        return _invitation_reward_configs[reward_id_str]    return Nonedef get_wb_boss_list_config(boss_id):    """        获取世界BOSS            ['id','int'],               #活动ID            ['startTime','string'],     #活动开始时间            ['endTime','string'],       #活动结束时间            ['monsterName','string'],   #怪物名字            ['level','int'],            #挑战等级限制            ['info','string'],          #说明文字            ['pic','string'],           #背景图片名称            ['type','int'],       #Boss类型            ['gold','int'],       #单位伤害奖励金币 需要除10000            ['stageId','int'],    #关卡ID    """    _wb_boss_list_config = client_configs['wb_boss_list_config']    boss_id_str = str(boss_id)    if boss_id_str in _wb_boss_list_config:        return _wb_boss_list_config[boss_id_str]    return Nonedef get_wb_inspire_config(inspire_id):    """        玩家鼓舞表            ['id','int'],               #鼓舞等级            ['gold','int'],             #花费金币            ['chance','int'],           #金币鼓舞成功率，万分之一            ['stone','int'],            #钻石鼓舞花费钻石数，必然成功            ['effect','int'],           #属性加成效果，百分比    """    _wb_inspire_config = client_configs['wb_inspire_config']    #inspire_id_str = str(inspire_id)    if str(inspire_id) in _wb_inspire_config:        return _wb_inspire_config[str(inspire_id)]    return Nonedef get_all_inspire_configs():    """        玩家的所有鼓舞表格    """    _wb_inspire_config = client_configs['wb_inspire_config']    return _wb_inspire_configdef get_wb_reload_config(reload_id):    """        世界BOSS重置表        ['id','int'],                #重置次数ID        ['stone','int'],             #花费钻石    """    _wb_reload_config = client_configs['wb_reload_config']    reload_id_str = str(reload_id)    if reload_id_str in _wb_reload_config:        return _wb_reload_config[reload_id_str]    return Nonedef get_wb_reward_config(rank_id):    """        ['id','int'],                #奖励ID        ['min','int'],               #名次下限        ['max','int'],               #名次上限        #奖励物品        ['item1','int'],             #掉落包ID        ['num1','int'],              #掉落包物品的发放数量        ['item2','int'],             #奖励物品2        ['num2','int'],              #奖励物品2数量        ['item3','int'],             #奖励物品3        ['num3','int'],              #奖励物品3数量        ['item4','int'],             #奖励物品4        ['num4','int'],              #奖励物品4数量        ['item5','int'],             #奖励物品5        ['num5','int'],              #奖励物品5数量        ['item6','int'],             #奖励物品6        ['num6','int'],              #奖励物品6数量        ['score','int'],             #世界BOSS积分奖励，未击杀世界BOSS时，获得积分减半    """    _wb_reward_config = client_configs['wb_reward_config']    select_wb_reward_config = lambda config: config['min'] <= rank_id <= config['max']    result = filter(select_wb_reward_config, _wb_reward_config.values())    if result:        return result[0]    return Nonedef get_boss_info_config(info_id):    """        获取boss info数据表        ["id","int"],   #BOSS类型编号ID        ["hpEffect","int"],          #血量扩大系数，除以100使用        ["attackEffect","int"],      #普攻扩大系数，除以100使用        ["defendEffect","int"],      #普防扩大系数，除以100使用        ["spcAttackEffect","int"],   #特攻扩大系数，除以100使用        ["spcDefendEffect","int"],   #特防扩大系数，除以100使用        ["speedEffect","int"],       #速度扩大系数，除以100使用        #缩放比例        ["zoom","int"],              #缩放比例系数，除以100使用    """    _boss_info_config = client_configs['boss_info_config']    select_boss_info_config = lambda x: x['id'] == info_id    boss_info_config_lst = filter(select_boss_info_config, _boss_info_config)    if boss_info_config_lst:        return boss_info_config_lst[0]    return Nonedef get_world_boss_shop_config(shop_id):    """        获取世界BOSS商店表            ["id", "int"],                   # 商品ID            ["packgeId", "int"],             # 商品分类            ["item", "int"],                 # 物品ID            ["num", "int"],                  # 物品数量            ["price", "int"],                # 物品积分售价            ["chance", "int"],               # 出现几率    """    _world_boss_shop_config = client_configs['boss_shop_config']    select_world_boss_shop_config = lambda x: x['id'] == shop_id    result = filter(select_world_boss_shop_config, _world_boss_shop_config)    if result:        return result[0]    return Nonedef get_pvp_shop_with_package(package_id):    """        用包ID 获取对应的物品列表    """    _pvp_shop_config = client_configs['pvp_shop_config']    select_pvp_shop_config = lambda x: x['packgeId'] == package_id    result = filter(select_pvp_shop_config, _pvp_shop_config)    return resultdef get_world_boss_shop_with_package(package_id):    """        用包ID 获取对应的物品列表    """    _world_boss_shop_config = client_configs['boss_shop_config']    select_world_boss_shop_config = lambda x: x['packgeId'] == package_id    result = filter(select_world_boss_shop_config, _world_boss_shop_config)    return resultdef get_all_pvp_shop_config():    """        获取钻石商场表格        ["id", "int"],                   # 商品ID        ["packgeId", "int"],             # 商品分类        ["item", "int"],                 # 物品ID        ["num", "int"],                  # 物品数量        ["price", "int"],                # 物品钻石售价        ["chance", "int"],               # 出现几率    """    _pvp_shop_config = client_configs['pvp_shop_config']    return _pvp_shop_configdef get_pvp_shop_with_id(config_id):    """        用表ID 获取对应的物品列表    """    _pvp_shop_config = client_configs['pvp_shop_config']    select_pvp_shop_config = lambda x: x['id'] == config_id    result = filter(select_pvp_shop_config, _pvp_shop_config)    if result:        return result[0]    return Nonedef get_regist_config(index):    """        30天签到        ["id","int"],                #签到奖励编号，对应签到天数        ["levelVIP","int"],          #获得双倍奖励所需VIP等级        ["stone","int"],             #当天签到可获得的单倍钻石数        ["gold","int"],              #当天签到可获得的单倍金币数        ["freeDraw","int"],          #当天签到可获得的单倍宝贝球数        ["item","int"],              #当天签到可获得的道具对应item表中的ID        ["itemNum","int"],           #当天签到可获得的单倍道具数        ["equip","int"],             #当天签到可获得的装备对应item表中的ID        ["monster","int"],           #当天签到可获得的宠物对应monster表中的ID        ["star","int"],              #当天签到可获得的宠物的星级    """    regist_config = client_configs['regist_config']    select_regist_config = lambda x: x['id'] == index    result = filter(select_regist_config, regist_config)    if result:        return result[0]    return None#以下为李亚冲修改def get_union_reward_config():    """    获取联盟奖励表格    物品表格        ['item_id','int'],               #物品ID        ['stone',int]       钻石        ['gold',int]        金币        ['union_level',int] 联盟等级        ['free_drop',int]      精灵球        ['price',int]       价格：花费的是联盟币        ["equipmentId",int]     装备ID        ['item_num',int]       奖励数量        ['id',int]      奖励等级？    """    _item_lst=[]    _item_config = client_configs['union_reward_config']    for item in _item_config.values():        _item_lst.append(item)    return _item_lstdef get_union_big_stage_name_config():    """    获取联盟关卡ID和副本名称        物品表格        ['name',unicode],               #副本名称        ['mission1~7',int ]       #关卡ID 1~7        ...其它的暂时用不上    """    _item_lst=[]    _item_config = client_configs['union_battlefield_level_config']    for item in _item_config.values():        _item_lst.append(item)    return _item_lstdef get_union_little_stage_name_config(union_id):    """    获取联盟关卡名称    """    stage_name=''    _item_config = client_configs['union_battlefield_config']    for item in _item_config.values():        if item['id']==int(union_id):            stage_name=item['pos']    return stage_namedef get_union_shop_items_config():    """    获得联盟商店的物品ID与名字对照字典    {id:name,id:name}    """    all_items,laji=get_item_config_with_id_name()    _item_dict={}    _item_config=client_configs['union_shop_config']    for item in _item_config.values():        _item_dict[item['item']]=all_items[item['item']]    return _item_dictdef get_fried_num_config(reward_id):    _friend_num_config=client_configs['reward_friend_number_config']    reward_id=str(reward_id).encode('utf-8')    print _friend_num_config,type(_friend_num_config)    if reward_id in _friend_num_config.keys():        print '有'        print _friend_num_config[reward_id]        return _friend_num_config[reward_id]    return Nonedef get_union_shop_items_by_num(num):    """    获得联盟商店的物品ID的详细信息    {u'56': {u'price': 240, u'item': 80304, u'chance': 687500, u'num': 12, u'packgeId': 4, u'id': 56}    """    item_lst = client_configs['union_shop_config']    return item_lst[str(num)]['item']